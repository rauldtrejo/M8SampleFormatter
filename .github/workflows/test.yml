name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-cpp:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew install cmake pkg-config libsndfile googletest
    
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. -DBUILD_TESTS=ON
    
    - name: Build tests
      run: |
        cd build
        make -j$(sysctl -n hw.ncpu)
    
    - name: Run C++ tests
      run: |
        cd build
        ./tests/cpp/m8_formatter_tests
    
    - name: Run C++ tests with verbose output
      run: |
        cd build
        ./tests/cpp/m8_formatter_tests --gtest_output=xml:test_results.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cpp-test-results
        path: build/test_results.xml

  test-swift:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew install swift
    
    - name: Build Swift package
      run: |
        swift build --package-path . -c debug
    
    - name: Run Swift tests
      run: |
        swift test --package-path . -c debug
    
    - name: Run Swift tests with coverage
      run: |
        swift test --package-path . -c debug --enable-code-coverage
    
    - name: Generate coverage report
      run: |
        swift test --package-path . -c debug --enable-code-coverage
        xcrun llvm-cov show .build/debug/M8FormatterGUI -instr-profile .build/debug/codecov/default.profdata > coverage.txt
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: swift-coverage-report
        path: coverage.txt

  test-integration:
    runs-on: macos-latest
    needs: [test-cpp, test-swift]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew install cmake pkg-config libsndfile googletest swift
    
    - name: Build complete project
      run: |
        ./scripts/build_complete.sh
    
    - name: Create test fixtures
      run: |
        mkdir -p tests/fixtures/input
        mkdir -p tests/fixtures/output
        
        # Create test audio files
        # This would create actual test audio files in a real implementation
        echo "Creating test fixtures..."
    
    - name: Run integration tests
      run: |
        # Test the complete application
        ./build/M8SampleFormatter tests/fixtures/input tests/fixtures/output
        
        # Test with different options
        ./build/M8SampleFormatter tests/fixtures/input tests/fixtures/output --no-bitdepth
        ./build/M8SampleFormatter tests/fixtures/input tests/fixtures/output --flatten-folders
    
    - name: Test GUI application
      run: |
        # Build and test the GUI
        swift build --package-path . -c release --product M8FormatterGUI
        ./scripts/build_app_bundle.sh
        
        # Test that the app bundle was created
        test -f M8SampleFormatter.app/Contents/MacOS/M8SampleFormatter

  test-performance:
    runs-on: macos-latest
    needs: [test-cpp, test-swift]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew install cmake pkg-config libsndfile googletest swift
    
    - name: Build release version
      run: |
        ./scripts/build_complete.sh
    
    - name: Create performance test data
      run: |
        mkdir -p tests/fixtures/performance
        # Create large test dataset for performance testing
        echo "Creating performance test data..."
    
    - name: Run performance tests
      run: |
        # Test processing speed with large datasets
        time ./build/M8SampleFormatter tests/fixtures/performance tests/fixtures/output
        
        # Test memory usage
        leaks --atExit -- ./build/M8SampleFormatter tests/fixtures/performance tests/fixtures/output
    
    - name: Benchmark results
      run: |
        echo "Performance test completed"
        # In a real implementation, this would parse and report benchmark results

  test-cross-platform:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-12, macos-13]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew install cmake pkg-config libsndfile googletest swift
    
    - name: Build and test
      run: |
        ./scripts/build_complete.sh
        cd build && make test

  test-memory:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew install cmake pkg-config libsndfile googletest swift valgrind
    
    - name: Build debug version
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug ..
        make -j$(sysctl -n hw.ncpu)
    
    - name: Run memory tests
      run: |
        # Test for memory leaks
        valgrind --leak-check=full --show-leak-kinds=all ./build/M8SampleFormatter tests/fixtures/input tests/fixtures/output
    
    - name: Run sanitizer tests
      run: |
        # Build with sanitizers
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined" ..
        make -j$(sysctl -n hw.ncpu)
        ./tests/cpp/m8_formatter_tests
